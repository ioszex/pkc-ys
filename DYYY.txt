// 头文件引入
#import <UIKit/UIKit.h>
#import <AVKit/AVKit.h>
#import <objc/runtime.h>
#import <substrate.h>
#import <Photos/Photos.h>
#import "CityManager.h"
#import "AwemeHeaders.h"
#import <objc/message.h>
#import "pxx.h"

// 嵌入 AWEAwemePlayVideoController 的定义
@interface AWEAwemePlayVideoController : UIViewController
- (void)setupPiPForView:(UIView *)playerView;
@end

// 嵌入 TTPlayerView 的定义
@interface TTPlayerView : UIView
@property (nonatomic, strong) id player;
@end

// 媒体类型
typedef NS_ENUM(NSUInteger, MediaType) {
    MediaTypeVideo,
    MediaTypeImage,
    MediaTypeAudio
};

// 宏定义
#define ScreenWidth ([UIScreen mainScreen].bounds.size.width)
#define ScreenHeight ([UIScreen mainScreen].bounds.size.height)
#define GTagColor(r, g, b) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1.0]
#define DYYY @"抖音DYYY"


// 常量定义
static void *kViewModelKey = &kViewModelKey;

// 获取顶层视图控制器
static UIViewController *getActiveTopViewController() {
    UIWindowScene *activeScene = nil;
    for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) {
        if (scene.activationState == UISceneActivationStateForegroundActive) {
            activeScene = scene;
            break;
        }
    }
    if (!activeScene) {
        for (id scene in [UIApplication sharedApplication].connectedScenes) {
            if ([scene isKindOfClass:[UIWindowScene class]]) {
                activeScene = (UIWindowScene *)scene;
                break;
            }
        }
    }
    if (!activeScene) return nil;
    UIWindow *window = activeScene.windows.firstObject;
    UIViewController *topController = window.rootViewController;
    while (topController.presentedViewController) {
        topController = topController.presentedViewController;
    }
    return topController;
}

// 获取最上层视图控制器
static UIViewController *topView(void) {
    UIWindow *window = nil;
    for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) {
        if (scene.activationState == UISceneActivationStateForegroundActive) {
            window = scene.windows.firstObject;
            break;
        }
    }
    if (!window) {
        for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) {
            if ([scene isKindOfClass:[UIWindowScene class]]) {
                window = scene.windows.firstObject;
                break;
            }
        }
    }
    if (!window) return nil;
    UIViewController *rootVC = window.rootViewController;
    while (rootVC.presentedViewController) {
        rootVC = rootVC.presentedViewController;
    }
    if ([rootVC isKindOfClass:[UINavigationController class]]) {
        return ((UINavigationController *)rootVC).topViewController;
    }
    return rootVC;
}

// 显示文本输入弹窗
static void showTextInputAlert(NSString *title, void (^onConfirm)(NSString *text), void (^onCancel)(void)) {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title message:nil preferredStyle:UIAlertControllerStyleAlert];
    [alertController addTextFieldWithConfigurationHandler:^(UITextField *textField) {
        textField.placeholder = @"请输入内容";
    }];
    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        NSString *inputText = alertController.textFields.firstObject.text;
        if (onConfirm) onConfirm(inputText);
    }];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
        if (onCancel) onCancel();
    }];
    [alertController addAction:cancelAction];
    [alertController addAction:okAction];
    dispatch_async(dispatch_get_main_queue(), ^{
        UIViewController *topVC = topView();
        if (topVC) [topVC presentViewController:alertController animated:YES completion:nil];
    });
}

// 获取和设置用户偏好
static bool getUserDefaults(NSString *key) {
    return [[NSUserDefaults standardUserDefaults] boolForKey:key];
}

static void setUserDefaults(id object, NSString *key) {
    [[NSUserDefaults standardUserDefaults] setObject:object forKey:key];
    [[NSUserDefaults standardUserDefaults] synchronize];
}

// 显示提示信息
static void showToast(NSString *text) {
    UIAlertController *toast = [UIAlertController alertControllerWithTitle:nil message:text preferredStyle:UIAlertControllerStyleAlert];
    UIViewController *topVC = topView();
    if (topVC) {
        [topVC presentViewController:toast animated:YES completion:nil];
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [toast dismissViewControllerAnimated:YES completion:nil];
        });
    }
}

// 保存媒体到相册
static void saveMedia(NSURL *mediaURL, MediaType mediaType) {
    if (mediaType == MediaTypeAudio) return;
    [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
        if (status == PHAuthorizationStatusAuthorized) {
            [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^{
                if (mediaType == MediaTypeVideo) {
                    [PHAssetChangeRequest creationRequestForAssetFromVideoAtFileURL:mediaURL];
                } else if (mediaType == MediaTypeImage) {
                    UIImage *image = [UIImage imageWithContentsOfFile:mediaURL.path];
                    if (image) [PHAssetChangeRequest creationRequestForAssetFromImage:image];
                }
            } completionHandler:^(BOOL success, NSError *error) {
                if (success) {
                    NSString *msg = [NSString stringWithFormat:@"%@已保存到相册", mediaType == MediaTypeVideo ? @"视频" : @"图片"];
                    showToast(msg);
                } else {
                    showToast(@"保存失败");
                }
                [[NSFileManager defaultManager] removeItemAtURL:mediaURL error:nil];
            }];
        }
    }];
}

// 下载媒体文件
static void downloadMedia(NSURL *url, MediaType mediaType) {
    dispatch_async(dispatch_get_main_queue(), ^{
        UIAlertController *loadingAlert = [UIAlertController alertControllerWithTitle:@"解析中..." message:nil preferredStyle:UIAlertControllerStyleAlert];
        UIViewController *topVC = topView();
        if (topVC) [topVC presentViewController:loadingAlert animated:YES completion:nil];

        NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
        NSURLSessionDownloadTask *downloadTask = [session downloadTaskWithURL:url completionHandler:^(NSURL *location, NSURLResponse *response, NSError *error) {
            dispatch_async(dispatch_get_main_queue(), ^{
                [loadingAlert dismissViewControllerAnimated:YES completion:nil];
            });
            if (!error) {
                NSString *fileName = url.lastPathComponent;
                if (!fileName.pathExtension.length) {
                    switch (mediaType) {
                        case MediaTypeVideo: fileName = [fileName stringByAppendingPathExtension:@"mp4"]; break;
                        case MediaTypeImage: fileName = [fileName stringByAppendingPathExtension:@"jpg"]; break;
                        case MediaTypeAudio: fileName = [fileName stringByAppendingPathExtension:@"mp3"]; break;
                    }
                }
                NSURL *tempDir = [NSURL fileURLWithPath:NSTemporaryDirectory()];
                NSURL *destinationURL = [tempDir URLByAppendingPathComponent:fileName];
                [[NSFileManager defaultManager] moveItemAtURL:location toURL:destinationURL error:nil];
                if (mediaType == MediaTypeAudio) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:@[destinationURL] applicationActivities:nil];
                        [activityVC setCompletionWithItemsHandler:^(UIActivityType _Nullable activityType, BOOL completed, NSArray * _Nullable returnedItems, NSError * _Nullable error) {
                            [[NSFileManager defaultManager] removeItemAtURL:destinationURL error:nil];
                        }];
                        UIViewController *topVC = topView();
                        if (topVC) [topVC presentViewController:activityVC animated:YES completion:nil];
                    });
                } else {
                    saveMedia(destinationURL, mediaType);
                }
            } else {
                showToast(@"下载失败");
            }
        }];
        [downloadTask resume];
    });
}

// Hook: 设置默认播放速度
%hook AWEAwemePlayVideoViewController
- (void)setIsAutoPlay:(BOOL)arg0 {
    float defaultSpeed = [[NSUserDefaults standardUserDefaults] floatForKey:@"DYYYDefaultSpeed"];
    if (defaultSpeed > 0 && defaultSpeed != 1) [self setVideoControllerPlaybackRate:defaultSpeed];
    %orig(arg0);
}
%end

// Hook: 隐藏底部加号按钮
%hook AWENormalModeTabBarGeneralPlusButton
+ (id)button {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenJia"]) return nil;
    return %orig;
}
%end

// Hook: 设置顶部透明度及纯净模式
%hook AWEFeedContainerContentView
- (void)setAlpha:(CGFloat)alpha {
    NSString *transparentValue = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYtopbartransparent"];
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnablePure"]) {
        %orig(0.0);
        static dispatch_source_t timer = nil;
        static int attempts = 0;
        if (timer) {
            dispatch_source_cancel(timer);
            timer = nil;
        }
        void (^tryFindAndSetPureMode)(void) = ^{
            Class FeedTableVC = NSClassFromString(@"AWEFeedTableViewController");
            UIViewController *feedVC = nil;
            UIViewController *rootViewController = getActiveTopViewController();
            if (rootViewController) {
                feedVC = [self findViewController:rootViewController ofClass:FeedTableVC];
                if (feedVC) {
                    [feedVC setValue:@YES forKey:@"pureMode"];
                    if (timer) {
                        dispatch_source_cancel(timer);
                        timer = nil;
                    }
                    attempts = 0;
                    return;
                }
            }
            attempts++;
            if (attempts >= 10) {
                if (timer) {
                    dispatch_source_cancel(timer);
                    timer = nil;
                }
                attempts = 0;
            }
        };
        timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());
        dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 0.5 * NSEC_PER_SEC, 0);
        dispatch_source_set_event_handler(timer, tryFindAndSetPureMode);
        dispatch_resume(timer);
        tryFindAndSetPureMode();
        return;
    }
    if (transparentValue && transparentValue.length > 0) {
        CGFloat alphaValue = [transparentValue floatValue];
        if (alphaValue >= 0.0 && alphaValue <= 1.0) %orig(alphaValue);
        else %orig(1.0);
    } else {
        %orig(1.0);
    }
}

%new
- (UIViewController *)findViewController:(UIViewController *)vc ofClass:(Class)targetClass {
    if (!vc) return nil;
    if ([vc isKindOfClass:targetClass]) return vc;
    for (UIViewController *childVC in vc.childViewControllers) {
        UIViewController *found = [self findViewController:childVC ofClass:targetClass];
        if (found) return found;
    }
    return [self findViewController:vc.presentedViewController ofClass:targetClass];
}
%end

// Hook: 修改弹幕颜色
%hook AWEDanmakuContentLabel
- (void)setTextColor:(UIColor *)textColor {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableDanmuColor"]) {
        NSString *danmuColor = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYdanmuColor"];
        if ([danmuColor.lowercaseString isEqualToString:@"random"] || [danmuColor.lowercaseString isEqualToString:@"#random"]) {
            textColor = [UIColor colorWithRed:(arc4random_uniform(256)) / 255.0
                                        green:(arc4random_uniform(256)) / 255.0
                                         blue:(arc4random_uniform(256)) / 255.0
                                        alpha:CGColorGetAlpha(textColor.CGColor)];
            self.layer.shadowOffset = CGSizeZero;
            self.layer.shadowOpacity = 0.0;
        } else if ([danmuColor hasPrefix:@"#"]) {
            textColor = [self colorFromHexString:danmuColor baseColor:textColor];
            self.layer.shadowOffset = CGSizeZero;
            self.layer.shadowOpacity = 0.0;
        } else {
            textColor = [self colorFromHexString:@"#FFFFFF" baseColor:textColor];
        }
    }
    %orig(textColor);
}

%new
- (UIColor *)colorFromHexString:(NSString *)hexString baseColor:(UIColor *)baseColor {
    if ([hexString hasPrefix:@"#"]) hexString = [hexString substringFromIndex:1];
    if ([hexString length] != 6) return [baseColor colorWithAlphaComponent:1];
    unsigned int red, green, blue;
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(0, 2)]] scanHexInt:&red];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(2, 2)]] scanHexInt:&green];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(4, 2)]] scanHexInt:&blue];
    return [UIColor colorWithRed:(red / 255.0) green:(green / 255.0) blue:(blue / 255.0) alpha:CGColorGetAlpha(baseColor.CGColor)];
}
%end

// Hook: 修改弹幕文本颜色
%hook AWEDanmakuItemTextInfo
- (void)setDanmakuTextColor:(id)arg1 {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableDanmuColor"]) {
        NSString *danmuColor = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYdanmuColor"];
        if ([danmuColor.lowercaseString isEqualToString:@"random"] || [danmuColor.lowercaseString isEqualToString:@"#random"]) {
            arg1 = [UIColor colorWithRed:(arc4random_uniform(256)) / 255.0
                                   green:(arc4random_uniform(256)) / 255.0
                                    blue:(arc4random_uniform(256)) / 255.0
                                   alpha:1.0];
        } else if ([danmuColor hasPrefix:@"#"]) {
            arg1 = [self colorFromHexStringForTextInfo:danmuColor];
        } else {
            arg1 = [self colorFromHexStringForTextInfo:@"#FFFFFF"];
        }
    }
    %orig(arg1);
}

%new
- (UIColor *)colorFromHexStringForTextInfo:(NSString *)hexString {
    if ([hexString hasPrefix:@"#"]) hexString = [hexString substringFromIndex:1];
    if ([hexString length] != 6) return [UIColor whiteColor];
    unsigned int red, green, blue;
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(0, 2)]] scanHexInt:&red];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(2, 2)]] scanHexInt:&green];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(4, 2)]] scanHexInt:&blue];
    return [UIColor colorWithRed:(red / 255.0) green:(green / 255.0) blue:(blue / 255.0) alpha:1.0];
}
%end


// Hook: 隐藏直播标记
%hook AWEFeedLiveMarkView
- (void)setHidden:(BOOL)hidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"]) hidden = YES;
    %orig(hidden);
}
%end

// Hook: 允许下载
%hook AWELongVideoControlModel
- (bool)allowDownload {
    return YES;
}
- (long long)preventDownloadType {
    return 0;
}
%end

// Hook: 隐藏横屏入口
%hook AWELandscapeFeedEntryView
- (void)setHidden:(BOOL)hidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenEntry"]) hidden = YES;
    %orig(hidden);
}
%end


%hook AWEAwemeModel
// 移除广告标记
- (void)setIsAds:(BOOL)isAds {
    %orig(NO); // 始终将 isAds 设置为 NO，移除广告标记
}

// 修改 IP 归属地显示
- (NSString *)ipAttribution {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableArea"]) {
        CityManager *cityManager = [CityManager sharedInstance];
        NSString *cityName = [cityManager getCityNameWithCode:self.cityCode];
        return cityName ?: %orig; // 如果获取到城市名则返回城市名，否则返回原始值
    }
    return %orig; // 如果未启用功能，返回原始值
}

// Hook: 跳过直播相关内容
- (void)live_callInitWithDictyCategoryMethod:(id)arg1 {
    if (self.currentAweme && [self.currentAweme isLive] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"]) return;
    %orig;
}

+ (id)liveStreamURLJSONTransformer {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)relatedLiveJSONTransformer {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)rawModelFromLiveRoomModel:(id)arg1 {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)aweLiveRoom_subModelPropertyKey {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}
%end

// Hook: 全屏和评论区模糊处理
%hook AWEPlayInteractionViewController
- (void)viewDidLayoutSubviews {
    %orig;
    if (![self.parentViewController isKindOfClass:%c(AWEFeedCellViewController)]) return;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        CGRect frame = self.view.frame;
        frame.size.height = self.view.superview.frame.size.height - 83;
        self.view.frame = frame;
    }
    BOOL shouldHideSubview = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"] || 
                             [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"];
    if (shouldHideSubview) {
        for (UIView *subview in self.view.subviews) {
            if ([subview isKindOfClass:[UIView class]] && 
                subview.backgroundColor && 
                CGColorEqualToColor(subview.backgroundColor.CGColor, [UIColor blackColor].CGColor)) {
                subview.hidden = YES;
            }
        }
    }
}

// 双击处理（下载或打开评论）
- (void)onVideoPlayerViewDoubleClicked:(UITapGestureRecognizer *)tapGes {
    if (getUserDefaults(@"DYYYDoubleClickedComment")) {
        [self performCommentAction];
        return;
    }
    if (!getUserDefaults(@"DYYYDoubleClickedDownload")) {
        %orig;
        return;
    }
    AWEAwemeModel *awemeModel = self.model;
    AWEVideoModel *videoModel = awemeModel.video;
    AWEMusicModel *musicModel = awemeModel.music;
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"无水印解析" message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    NSString *typeStr = awemeModel.awemeType == 68 ? @"下载图片" : @"下载视频";
    [alertController addAction:[UIAlertAction actionWithTitle:typeStr style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        NSURL *url = nil;
        if (awemeModel.awemeType == 68) {
            AWEImageAlbumImageModel *currentImageModel = awemeModel.albumImages.count == 1 ? awemeModel.albumImages.firstObject : awemeModel.albumImages[awemeModel.currentImageIndex - 1];
            url = [NSURL URLWithString:currentImageModel.urlList.firstObject];
            downloadMedia(url, MediaTypeImage);
        } else {
            url = [NSURL URLWithString:videoModel.h264URL.originURLList.firstObject];
            downloadMedia(url, MediaTypeVideo);
        }
    }]];
    [alertController addAction:[UIAlertAction actionWithTitle:@"下载音频" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        NSURL *url = [NSURL URLWithString:musicModel.playURL.originURLList.firstObject];
        downloadMedia(url, MediaTypeAudio);
    }]];
    [alertController addAction:[UIAlertAction actionWithTitle:@"下载封面" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        NSURL *url = [NSURL URLWithString:videoModel.coverURL.originURLList.firstObject];
        downloadMedia(url, MediaTypeImage);
    }]];
    [alertController addAction:[UIAlertAction actionWithTitle:@"点赞视频" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        %orig;
    }]];
    [alertController addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil]];
    [self presentViewController:alertController animated:YES completion:nil];
}
%end

// Hook: 全屏布局调整
%hook AWEStoryContainerCollectionView
- (void)layoutSubviews {
    %orig;
    for (UIView *subview in self.subviews) {
        if ([subview isKindOfClass:[UIView class]]) {
            UIView *nextResponder = (UIView *)subview.nextResponder;
            if ([nextResponder isKindOfClass:%c(AWEPlayInteractionViewController)]) {
                UIViewController *awemeBaseVC = [nextResponder valueForKey:@"awemeBaseViewController"];
                if (!awemeBaseVC || ![awemeBaseVC isKindOfClass:%c(AWEFeedCellViewController)]) return;
            }
            if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
                CGRect frame = subview.frame;
                frame.size.height = subview.superview.frame.size.height - 83;
                subview.frame = frame;
            }
        }
    }
}
%end

// Hook: 全屏表格视图调整
%hook AWEFeedTableView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        CGRect frame = self.frame;
        frame.size.height = self.superview.frame.size.height;
        self.frame = frame;
    }
}
%end

// Hook: 全屏进度条调整
%hook AWEPlayInteractionProgressContainerView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) [subview setBackgroundColor:[UIColor clearColor]];
        }
    }
}
%end

// Hook: 全屏速度视图调整
%hook AFDFastSpeedView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) [subview setBackgroundColor:[UIColor clearColor]];
        }
    }
}
%end

// Hook: 隐藏底部红点
%hook AWENormalModeTabBarBadgeContainerView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenBottomDot"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:NSClassFromString(@"DUXBadge")]) [subview setHidden:YES];
        }
    }
}
%end

// Hook: 隐藏侧边栏红点
%hook AWELeftSideBarEntranceView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenSidebarDot"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:NSClassFromString(@"DUXBadge")]) subview.hidden = YES;
        }
    }
}
%end

// Hook: 隐藏交互按钮
%hook AWEFeedVideoButton
- (void)layoutSubviews {
    %orig;
    NSString *label = self.accessibilityLabel;
    if ([label isEqualToString:@"点赞"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideLikeButton"]) {
        [self removeFromSuperview];
        return;
    } else if ([label isEqualToString:@"评论"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideCommentButton"]) {
        [self removeFromSuperview];
        return;
    } else if ([label isEqualToString:@"分享"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideShareButton"]) {
        [self removeFromSuperview];
        return;
    } else if ([label isEqualToString:@"收藏"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideCollectButton"]) {
        [self removeFromSuperview];
        return;
    }
}

- (id)touchUpInsideBlock {
    id r = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYcollectTips"] && [self.accessibilityLabel isEqualToString:@"收藏"]) {
        dispatch_async(dispatch_get_main_queue(), ^{
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"收藏确认" message:@"是否[确认/取消]收藏？" preferredStyle:UIAlertControllerStyleAlert];
            [alert addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil]];
            [alert addAction:[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
                if (r && [r isKindOfClass:NSClassFromString(@"NSBlock")]) ((void(^)(void))r)();
            }]];
            [getActiveTopViewController() presentViewController:alert animated:YES completion:nil];
        });
        return nil;
    }
    return r;
}
%end

// Hook: 隐藏音乐按钮
%hook AWEMusicCoverButton
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMusicButton"] && [self.accessibilityLabel isEqualToString:@"音乐详情"]) {
        [self removeFromSuperview];
    }
}
%end

// Hook: 隐藏音乐交互视图
%hook AWEPlayInteractionListenFeedView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMusicButton"]) [self removeFromSuperview];
}
%end

// Hook: 隐藏关注提示
%hook AWEPlayInteractionFollowPromptView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"] && [self.accessibilityLabel isEqualToString:@"关注"]) {
        [self removeFromSuperview];
    }
}
%end

// Hook: 隐藏广告头像
%hook AWEAdAvatarView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"]) [self removeFromSuperview];
}
%end

// Hook: 底部导航栏调整
%hook AWENormalModeTabBar
- (void)layoutSubviews {
    %orig;
    BOOL hideShop = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideShopButton"];
    BOOL hideMsg = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMessageButton"];
    BOOL hideFri = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideFriendsButton"];
    NSMutableArray *visibleButtons = [NSMutableArray array];
    Class generalButtonClass = %c(AWENormalModeTabBarGeneralButton);
    Class plusButtonClass = %c(AWENormalModeTabBarGeneralPlusButton);
    for (UIView *subview in self.subviews) {
        if (![subview isKindOfClass:generalButtonClass] && ![subview isKindOfClass:plusButtonClass]) continue;
        NSString *label = subview.accessibilityLabel;
        BOOL shouldHide = NO;
        if ([label isEqualToString:@"商城"]) shouldHide = hideShop;
        else if ([label containsString:@"消息"]) shouldHide = hideMsg;
        else if ([label containsString:@"朋友"]) shouldHide = hideFri;
        if (!shouldHide) [visibleButtons addObject:subview];
        else [subview removeFromSuperview];
    }
    [visibleButtons sortUsingComparator:^NSComparisonResult(UIView* a, UIView* b) {
        return [@(a.frame.origin.x) compare:@(b.frame.origin.x)];
    }];
    CGFloat totalWidth = self.bounds.size.width;
    CGFloat buttonWidth = totalWidth / visibleButtons.count;
    for (NSInteger i = 0; i < visibleButtons.count; i++) {
        UIView *button = visibleButtons[i];
        button.frame = CGRectMake(i * buttonWidth, button.frame.origin.y, buttonWidth, button.frame.size.height);
    }
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenBottomBg"] || [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) {
                BOOL hasImageView = NO;
                for (UIView *childView in subview.subviews) {
                    if ([childView isKindOfClass:[UIImageView class]]) {
                        hasImageView = YES;
                        break;
                    }
                }
                if (hasImageView) {
                    subview.hidden = YES;
                    break;
                }
            }
        }
    }
}
%end

// Hook: 设置键盘外观
%hook UITextInputTraits
- (void)setKeyboardAppearance:(UIKeyboardAppearance)appearance {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) %orig(UIKeyboardAppearanceDark);
    else %orig;
}
%end

// Hook: 深色表情面板
%hook AWECommentMiniEmoticonPanelView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:[UICollectionView class]]) {
                subview.backgroundColor = [UIColor colorWithRed:115/255.0 green:115/255.0 blue:115/255.0 alpha:1.0];
            }
        }
    }
}
%end

// Hook: 深色评论引导视图
%hook AWECommentPublishGuidanceView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:[UICollectionView class]]) {
                subview.backgroundColor = [UIColor colorWithRed:115/255.0 green:115/255.0 blue:115/255.0 alpha:1.0];
            }
        }
    }
}
%end



// Hook: 设置按钮图标颜色
%hook UIButton
- (void)setImage:(UIImage *)image forState:(UIControlState)state {
    NSString *label = self.accessibilityLabel;
    if ([label isEqualToString:@"表情"] || [label isEqualToString:@"at"] || [label isEqualToString:@"图片"] || [label isEqualToString:@"键盘"]) {
        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
            UIImage *whiteImage = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
            self.tintColor = [UIColor whiteColor];
            %orig(whiteImage, state);
        } else {
            %orig(image, state);
        }
    } else {
        %orig(image, state);
    }
}
%end

// Hook: 设置文本视图颜色
%hook AWETextViewInternal
- (void)drawRect:(CGRect)rect {
    %orig(rect);
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) self.textColor = [UIColor whiteColor];
}

- (double)lineSpacing {
    double r = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) self.textColor = [UIColor whiteColor];
    return r;
}
%end

// Hook: 关注二次确认
%hook AWEPlayInteractionUserAvatarElement
- (void)onFollowViewClicked:(UITapGestureRecognizer *)gesture {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYfollowTips"]) {
        dispatch_async(dispatch_get_main_queue(), ^{
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"关注确认" message:@"是否确认关注？" preferredStyle:UIAlertControllerStyleAlert];
            [alert addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil]];
            [alert addAction:[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
                %orig(gesture);
            }]];
            [getActiveTopViewController() presentViewController:alert animated:YES completion:nil];
        });
    } else {
        %orig;
    }
}
%end

// Hook: 显示视频进度条
%hook AWEFeedProgressSlider
- (void)setAlpha:(CGFloat)alpha {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisShowSchedule"]) alpha = 1.0;
    %orig(alpha);
}
%end

// Hook: 自定义底部导航标题
%hook AWENormalModeTabBarTextView
- (void)layoutSubviews {
    %orig;
    NSString *indexTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYIndexTitle"];
    NSString *friendsTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYFriendsTitle"];
    NSString *msgTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYMsgTitle"];
    NSString *selfTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYSelfTitle"];
    for (UIView *subview in self.subviews) {
        if ([subview isKindOfClass:[UILabel class]]) {
            UILabel *label = (UILabel *)subview;
            if ([label.text isEqualToString:@"首页"] && indexTitle.length > 0) {
                [label setText:indexTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"朋友"] && friendsTitle.length > 0) {
                [label setText:friendsTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"消息"] && msgTitle.length > 0) {
                [label setText:msgTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"我"] && selfTitle.length > 0) {
                [label setText:selfTitle];
                [self setNeedsLayout];
            }
        }
    }
}
%end

// Hook: 启用自动播放
%hook AWEFeedIPhoneAutoPlayManager
- (BOOL)isAutoPlayOpen {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableAutoPlay"]) return YES;
    return %orig;
}
%end

// Hook: 移除顶部标签
%hook AWEHPTopTabItemModel
- (void)setChannelID:(NSString *)channelID {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if (([channelID isEqualToString:@"homepage_hot_container"] && [defaults boolForKey:@"DYYYHideHotContainer"]) ||
        ([channelID isEqualToString:@"homepage_follow"] && [defaults boolForKey:@"DYYYHideFollow"]) ||
        ([channelID isEqualToString:@"homepage_mediumvideo"] && [defaults boolForKey:@"DYYYHideMediumVideo"]) ||
        ([channelID isEqualToString:@"homepage_mall"] && [defaults boolForKey:@"DYYYHideMall"]) ||
        ([channelID isEqualToString:@"homepage_nearby"] && [defaults boolForKey:@"DYYYHideNearby"]) ||
        ([channelID isEqualToString:@"homepage_groupon"] && [defaults boolForKey:@"DYYYHideGroupon"]) ||
        ([channelID isEqualToString:@"homepage_tablive"] && [defaults boolForKey:@"DYYYHideTabLive"]) ||
        ([channelID isEqualToString:@"homepage_pad_hot"] && [defaults boolForKey:@"DYYYHidePadHot"]) ||
        ([channelID isEqualToString:@"homepage_hangout"] && [defaults boolForKey:@"DYYYHideHangout"])) {
        return;
    }
    %orig;
}
%end

// Hook: 显示IP属地
%hook AWEPlayInteractionTimestampElement
- (id)timestampLabel {
    UILabel *label = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableArea"]) {
        NSString *text = label.text;
        NSString *cityCode = self.model.cityCode;
        if (cityCode.length > 0) {
            NSString *cityName = [CityManager.sharedInstance getCityNameWithCode:cityCode] ?: @"";
            NSString *provinceName = [CityManager.sharedInstance getProvinceNameWithCode:cityCode] ?: @"";
            if (cityName.length > 0 && ![text containsString:cityName]) {
                if (!self.model.ipAttribution) {
                    BOOL isDirectCity = [provinceName isEqualToString:cityName] || 
                                       ([cityCode hasPrefix:@"11"] || [cityCode hasPrefix:@"12"] || 
                                        [cityCode hasPrefix:@"31"] || [cityCode hasPrefix:@"50"]);
                    if (isDirectCity) {
                        label.text = [NSString stringWithFormat:@"%@  IP属地：%@", text, cityName];
                    } else {
                        label.text = [NSString stringWithFormat:@"%@  IP属地：%@ %@", text, provinceName, cityName];
                    }
                } else {
                    BOOL isDirectCity = [provinceName isEqualToString:cityName] || 
                                       ([cityCode hasPrefix:@"11"] || [cityCode hasPrefix:@"12"] || 
                                        [cityCode hasPrefix:@"31"] || [cityCode hasPrefix:@"50"]);
                    BOOL containsProvince = [text containsString:provinceName];
                    if (isDirectCity && containsProvince) {
                        label.text = text;
                    } else if (containsProvince) {
                        label.text = [NSString stringWithFormat:@"%@ %@", text, cityName];
                    } else {
                        label.text = text;
                    }
                }
            }
        }
    }
    return label;
}

+ (BOOL)shouldActiveWithData:(id)arg1 context:(id)arg2 {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableArea"];
}
%end

// Hook: 隐藏状态栏
%hook AWEFeedRootViewController
- (BOOL)prefersStatusBarHidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHideStatusbar"]) return YES;
    return %orig;
}
%end

// Hook: 隐藏发现入口
%hook AWEHPDiscoverFeedEntranceView
- (void)setAlpha:(CGFloat)alpha {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideDiscover"]) alpha = 0;
    %orig(alpha);
}
%end

// Hook: 隐藏我的页面元素
%hook AWEUserWorkCollectionViewComponentCell
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) [self removeFromSuperview];
}
%end

%hook AWEFeedRefreshFooter
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) [self removeFromSuperview];
}
%end

%hook AWERLSegmentView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) [self removeFromSuperview];
}
%end

// Hook: 隐藏定位
%hook AWEFeedTemplateAnchorView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideLocation"]) [self removeFromSuperview];
}
%end

// Hook: 隐藏相关搜索
%hook AWEPlayInteractionSearchAnchorView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideInteractionSearch"]) [self removeFromSuperview];
}
%end

// Hook: 隐藏汽水听
%hook AWEAwemeMusicInfoView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideQuqishuiting"]) self.hidden = YES;
}
%end

// Hook: 隐藏热点提示
%hook AWETemplateHotspotView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideHotspot"]) [self removeFromSuperview];
}
%end

// Hook: 设置界面样式
%hook AWESettingBaseViewController
- (bool)useCardUIStyle {
    return YES;
}

- (AWESettingBaseViewModel *)viewModel {
    AWESettingBaseViewModel *original = %orig;
    if (!original) return objc_getAssociatedObject(self, &kViewModelKey);
    return original;
}
%end


// Hook: 设置菜单
// Hook AWESettingsViewModel
%hook AWESettingsViewModel
- (NSArray *)sectionDataArray {
    NSArray *originalSections = %orig;
    BOOL sectionExists = NO;
    for (AWESettingSectionModel *section in originalSections) {
        if ([section.sectionHeaderTitle isEqualToString:@"DYYY"]) {
            sectionExists = YES;
            break;
        }
    }
    if (self.traceEnterFrom && !sectionExists) {
        AWESettingItemModel *newItem = [[%c(AWESettingItemModel) alloc] init];
        newItem.identifier = @"DYYY";
        newItem.title = @"DYYY 设置";
        newItem.detail = @"2.0-9++";
        newItem.type = 0;
        newItem.iconImageName = @"noticesettting_like";
        newItem.cellType = 26;
        newItem.colorStyle = 2;
        newItem.isEnable = YES;
        newItem.cellTappedBlock = ^{
            UIViewController *rootVC = self.controllerDelegate;
            AWESettingBaseViewController *settingsVC = [[%c(AWESettingBaseViewController) alloc] init];
            AWENavigationBar *navigationBar = nil;
            for (UIView *subview in settingsVC.view.subviews) {
                if ([subview isKindOfClass:%c(AWENavigationBar)]) {
                    navigationBar = (AWENavigationBar *)subview;
                    break;
                }
            }
            if (navigationBar) navigationBar.titleLabel.text = @"DYYY 设置";
            AWESettingsViewModel *viewModel = [[%c(AWESettingsViewModel) alloc] init];
            viewModel.colorStyle = 0;

            // 基本设置
            AWESettingSectionModel *basicSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            basicSettingsSection.sectionHeaderTitle = @"基本设置";
            basicSettingsSection.sectionHeaderHeight = 40;
            basicSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *basicSettingsItems = [NSMutableArray array];
            NSMutableDictionary *cellTapHandlers = [NSMutableDictionary dictionary];
            NSArray *basicSettings = @[
                @{@"identifier": @"DYYYEnableDanmuColor", @"title": @"开启弹幕改色", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYdanmuColor", @"title": @"修改弹幕颜色", @"detail": @"十六进制", @"cellType": @26, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisDarkKeyBoard", @"title": @"启用深色键盘", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisShowSchedule", @"title": @"启用视频进度", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisEnableAutoPlay", @"title": @"启用自动播放", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisSkipLive", @"title": @"启用过滤直播", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisEnablePure", @"title": @"启用首页净化", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisEnableFullScreen", @"title": @"启用首页全屏", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisEnableCommentBlur", @"title": @"评论区毛玻璃", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisEnableArea", @"title": @"时间属地显示", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYisHideStatusbar", @"title": @"隐藏系统顶栏", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYfollowTips", @"title": @"关注二次确认", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYcollectTips", @"title": @"收藏二次确认", @"detail": @"", @"cellType": @6, @"imageName": @"ic_gear_filled"}
            ];
            for (NSDictionary *dict in basicSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                item.isSwitchOn = getUserDefaults(item.identifier);
                if (item.cellType == 26) {
                    cellTapHandlers[item.identifier] = ^{
                        showTextInputAlert(item.title, ^(NSString *text) {
                            setUserDefaults(text, item.identifier);
                        }, nil);
                    };
                    item.cellTappedBlock = cellTapHandlers[item.identifier];
                } else {
                    __weak AWESettingItemModel *weakItem = item;
                    item.switchChangedBlock = ^{
                        __strong AWESettingItemModel *strongItem = weakItem;
                        if (strongItem) {
                            BOOL isSwitchOn = !strongItem.isSwitchOn;
                            strongItem.isSwitchOn = isSwitchOn;
                            setUserDefaults(@(isSwitchOn), strongItem.identifier);
                        }
                    };
                }
                [basicSettingsItems addObject:item];
            }
            basicSettingsSection.itemArray = basicSettingsItems;

            // 界面设置
            AWESettingSectionModel *uiSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            uiSettingsSection.sectionHeaderTitle = @"界面设置";
            uiSettingsSection.sectionHeaderHeight = 40;
            uiSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *uiSettingsItems = [NSMutableArray array];
            NSArray *uiSettings = @[
                @{@"identifier": @"DYYYtopbartransparent", @"title": @"设置顶栏透明", @"detail": @"0-1小数", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYGlobalTransparency", @"title": @"设置全局透明", @"detail": @"0-1的小数", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYDefaultSpeed", @"title": @"设置默认倍速", @"detail": @"", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYIndexTitle", @"title": @"设置首页标题", @"detail": @"不填默认", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYFriendsTitle", @"title": @"设置朋友标题", @"detail": @"不填默认", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYMsgTitle", @"title": @"设置消息标题", @"detail": @"不填默认", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"},
                @{@"identifier": @"DYYYSelfTitle", @"title": @"设置我的标题", @"detail": @"不填默认", @"cellType": @26, @"imageName": @"ic_ipadiphone_outlined"}
            ];
            for (NSDictionary *dict in uiSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                cellTapHandlers[item.identifier] = ^{
                    showTextInputAlert(item.title, ^(NSString *text) {
                        setUserDefaults(text, item.identifier);
                    }, nil);
                };
                item.cellTappedBlock = cellTapHandlers[item.identifier];
                [uiSettingsItems addObject:item];
            }
            uiSettingsSection.itemArray = uiSettingsItems;

            // 隐藏设置
            AWESettingSectionModel *hideSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            hideSettingsSection.sectionHeaderTitle = @"隐藏设置";
            hideSettingsSection.sectionHeaderHeight = 40;
            hideSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *hideSettingsItems = [NSMutableArray array];
            NSArray *hideSettings = @[
                @{@"identifier": @"DYYYisHiddenEntry", @"title": @"隐藏全屏观看", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideShopButton", @"title": @"隐藏底栏商城", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideMessageButton", @"title": @"隐藏底栏信息", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideFriendsButton", @"title": @"隐藏底栏朋友", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYisHiddenJia", @"title": @"隐藏底栏加号", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYisHiddenBottomDot", @"title": @"隐藏底栏红点", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYisHiddenBottomBg", @"title": @"隐藏底栏背景", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYisHiddenSidebarDot", @"title": @"隐藏侧栏红点", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideLikeButton", @"title": @"隐藏点赞按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideCommentButton", @"title": @"隐藏评论按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideCollectButton", @"title": @"隐藏收藏按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideAvatarButton", @"title": @"隐藏头像按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideMusicButton", @"title": @"隐藏音乐按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideShareButton", @"title": @"隐藏分享按钮", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideLocation", @"title": @"隐藏视频定位", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideDiscover", @"title": @"隐藏右上搜索", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideMyPage", @"title": @"隐藏我的页面", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideInteractionSearch", @"title": @"隐藏相关搜索", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideQuqishuiting", @"title": @"隐藏去汽水听", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"},
                @{@"identifier": @"DYYYHideHotspot", @"title": @"隐藏热点提示", @"detail": @"", @"cellType": @6, @"imageName": @"ic_xmark_outlined_16"}
            ];
            for (NSDictionary *dict in hideSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                item.isSwitchOn = getUserDefaults(item.identifier);
                __weak AWESettingItemModel *weakItem = item;
                item.switchChangedBlock = ^{
                    __strong AWESettingItemModel *strongItem = weakItem;
                    if (strongItem) {
                        BOOL isSwitchOn = !strongItem.isSwitchOn;
                        strongItem.isSwitchOn = isSwitchOn;
                        setUserDefaults(@(isSwitchOn), strongItem.identifier);
                    }
                };
                [hideSettingsItems addObject:item];
            }
            hideSettingsSection.itemArray = hideSettingsItems;

            // 顶栏移除
            AWESettingSectionModel *removeSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            removeSettingsSection.sectionHeaderTitle = @"顶栏移除";
            removeSettingsSection.sectionHeaderHeight = 40;
            removeSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *removeSettingsItems = [NSMutableArray array];
            NSArray *removeSettings = @[
                @{@"identifier": @"DYYYHideHotContainer", @"title": @"移除推荐", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideFollow", @"title": @"移除关注", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideMediumVideo", @"title": @"移除精选", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideMall", @"title": @"移除商城", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideNearby", @"title": @"移除同城", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideGroupon", @"title": @"移除团购", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideTabLive", @"title": @"移除直播", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHidePadHot", @"title": @"移除热点", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"},
                @{@"identifier": @"DYYYHideHangout", @"title": @"移除经验", @"detail": @"", @"cellType": @6, @"imageName": @"ic_minuscircle_outlined_20"}
            ];
            for (NSDictionary *dict in removeSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                item.isSwitchOn = getUserDefaults(item.identifier);
                __weak AWESettingItemModel *weakItem = item;
                item.switchChangedBlock = ^{
                    __strong AWESettingItemModel *strongItem = weakItem;
                    if (strongItem) {
                        BOOL isSwitchOn = !strongItem.isSwitchOn;
                        strongItem.isSwitchOn = isSwitchOn;
                        setUserDefaults(@(isSwitchOn), strongItem.identifier);
                    }
                };
                [removeSettingsItems addObject:item];
            }
            removeSettingsSection.itemArray = removeSettingsItems;

            // 增强设置
            AWESettingSectionModel *enhanceSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            enhanceSettingsSection.sectionHeaderTitle = @"增强设置";
            enhanceSettingsSection.sectionHeaderHeight = 40;
            enhanceSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *enhanceSettingsItems = [NSMutableArray array];
            NSArray *enhanceSettings = @[
                @{@"identifier": @"DYYYDoubleClickedDownload", @"title": @"双击下载", @"detail": @"无水印保存", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYDoubleClickedComment", @"title": @"双击打开评论区", @"detail": @"", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYLongPressDownload", @"title": @"长按下载", @"detail": @"无水印保存", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYClearCache", @"title": @"一键清理缓存", @"detail": @"", @"cellType": @26, @"imageName": @"ic_star_outlined_12"}
            ];
            for (NSDictionary *dict in enhanceSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                if (item.cellType == 26) {
                    if ([item.identifier isEqualToString:@"DYYYClearCache"]) {
                        cellTapHandlers[item.identifier] = ^{
                            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"确认清理"
                                                                                          message:@"是否清理插件缓存？"
                                                                                   preferredStyle:UIAlertControllerStyleAlert];
                            [alert addAction:[UIAlertAction actionWithTitle:@"取消"
                                                                      style:UIAlertActionStyleCancel
                                                                    handler:nil]];
                            [alert addAction:[UIAlertAction actionWithTitle:@"确定"
                                                                      style:UIAlertActionStyleDefault
                                                                    handler:^(UIAlertAction *action) {
                                NSFileManager *fileManager = [NSFileManager defaultManager];
                                NSString *tempDir = NSTemporaryDirectory();
                                NSError *error = nil;
                                NSArray *files = [fileManager contentsOfDirectoryAtPath:tempDir error:&error];
                                if (error) {
                                    showToast(@"无法访问缓存目录");
                                    return;
                                }
                                long long totalSize = 0;
                                for (NSString *file in files) {
                                    if ([file hasPrefix:@"DYYY"]) {
                                        NSString *filePath = [tempDir stringByAppendingPathComponent:file];
                                        NSDictionary *attributes = [fileManager attributesOfItemAtPath:filePath error:nil];
                                        totalSize += [attributes[NSFileSize] longLongValue];
                                        [fileManager removeItemAtPath:filePath error:nil];
                                    }
                                }
                                NSString *message = totalSize > 0
                                    ? [NSString stringWithFormat:@"清理完成，释放 %.2f MB", totalSize / (1024.0 * 1024.0)]
                                    : @"没有可清理的缓存";
                                showToast(message);
                            }]];
                            dispatch_async(dispatch_get_main_queue(), ^{
                                UIViewController *topVC = getActiveTopViewController();
                                if (topVC) [topVC presentViewController:alert animated:YES completion:nil];
                            });
                        };
                        item.cellTappedBlock = cellTapHandlers[item.identifier];
                    }
                } else {
                    item.isSwitchOn = getUserDefaults(item.identifier);
                    __weak AWESettingItemModel *weakItem = item;
                    item.switchChangedBlock = ^{
                        __strong AWESettingItemModel *strongItem = weakItem;
                        if (strongItem) {
                            BOOL isSwitchOn = !strongItem.isSwitchOn;
                            strongItem.isSwitchOn = isSwitchOn;
                            setUserDefaults(@(isSwitchOn), strongItem.identifier);
                        }
                    };
                }
                [enhanceSettingsItems addObject:item];
            }
            enhanceSettingsSection.itemArray = enhanceSettingsItems;

            // 分词大爆炸设置
            AWESettingSectionModel *segmentationSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            segmentationSettingsSection.sectionHeaderTitle = @"分词大爆炸";
            segmentationSettingsSection.sectionHeaderHeight = 40;
            segmentationSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *segmentationSettingsItems = [NSMutableArray array];
            NSArray *segmentationSettings = @[
                @{@"identifier": @"DYYYEnableGlobalSegmentation", @"title": @"@全局分词", @"detail": @"启用APP内所有文本分词", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYEnableCopySegmentation", @"title": @"@启用复制分词", @"detail": @"在复制菜单中显示“复制分词”选项", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYEnableCommentEnhancement", @"title": @"@启用评论区分词", @"detail": @"启用评论分词", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYEnableCommentTagFlow", @"title": @"@评论区-分词标签显示", @"detail": @"启用标签流显示", @"cellType": @6, @"imageName": @"ic_gear_filled"}
            ];
            for (NSDictionary *dict in segmentationSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                item.detail = dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                // 默认开启所有分词功能
                BOOL hasDefaultValue = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier] != nil;
                item.isSwitchOn = hasDefaultValue ? getUserDefaults(item.identifier) : YES;
                if (!hasDefaultValue) {
                    setUserDefaults(@YES, item.identifier);
                }
                __weak AWESettingItemModel *weakItem = item;
                item.switchChangedBlock = ^{
                    __strong AWESettingItemModel *strongItem = weakItem;
                    if (strongItem) {
                        BOOL isSwitchOn = !strongItem.isSwitchOn;
                        strongItem.isSwitchOn = isSwitchOn;
                        setUserDefaults(@(isSwitchOn), strongItem.identifier);
                    }
                };
                [segmentationSettingsItems addObject:item];
            }
            segmentationSettingsSection.itemArray = segmentationSettingsItems;

            // 画中画PIP设置
            AWESettingSectionModel *pipSettingsSection = [[%c(AWESettingSectionModel) alloc] init];
            pipSettingsSection.sectionHeaderTitle = @"画中画PIP设置";
            pipSettingsSection.sectionHeaderHeight = 40;
            pipSettingsSection.type = 0;
            NSMutableArray<AWESettingItemModel *> *pipSettingsItems = [NSMutableArray array];
            NSArray *pipSettings = @[
                @{@"identifier": @"DYYYEnablePiP", @"title": @"启用画中画", @"detail": @"开启后，支持在应用内使用画中画功能", @"cellType": @6, @"imageName": @"ic_gear_filled"},
                @{@"identifier": @"DYYYForcePiPShowing", @"title": @"强制显示画中画", @"detail": @"开启后，强制显示画中画窗口", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYEnableOnePiP", @"title": @"启用单个画中画实例", @"detail": @"开启后，允许显示单个画中画实例", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYEnableLivePiP", @"title": @"启用直播小窗口", @"detail": @"开启后，允许显示直播小窗口", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYEnableAVPiP", @"title": @"启用音视频 PiP", @"detail": @"开启后，允许显示音视频 PiP", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYUsePiPButton", @"title": @"使用画中画按钮", @"detail": @"开启后，通过按钮手动触发 PiP", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYEnablePiPContainer", @"title": @"启用 PiP 容器", @"detail": @"开启后，强制显示 PiP 容器", @"cellType": @6, @"imageName": @"ic_star_outlined_12"},
                @{@"identifier": @"DYYYEnableAVPlayerPiP", @"title": @"为 AVPlayer 启用 PiP", @"detail": @"开启后，为 AVPlayer 添加 PiP 支持", @"cellType": @6, @"imageName": @"ic_star_outlined_12"}
            ];
            for (NSDictionary *dict in pipSettings) {
                AWESettingItemModel *item = [[%c(AWESettingItemModel) alloc] init];
                item.identifier = dict[@"identifier"];
                item.title = dict[@"title"];
                NSString *savedDetail = [[NSUserDefaults standardUserDefaults] objectForKey:item.identifier];
                item.detail = savedDetail ?: dict[@"detail"];
                item.type = 1000;
                item.svgIconImageName = dict[@"imageName"];
                item.cellType = [dict[@"cellType"] integerValue];
                item.colorStyle = 0;
                item.isEnable = YES;
                item.isSwitchOn = getUserDefaults(item.identifier);
                __weak AWESettingItemModel *weakItem = item;
                item.switchChangedBlock = ^{
                    __strong AWESettingItemModel *strongItem = weakItem;
                    if (strongItem) {
                        BOOL isSwitchOn = !strongItem.isSwitchOn;
                        strongItem.isSwitchOn = isSwitchOn;
                        setUserDefaults(@(isSwitchOn), strongItem.identifier);
                        if ([strongItem.identifier isEqualToString:@"DYYYEnablePiP"] || 
                            [strongItem.identifier isEqualToString:@"DYYYEnableAVPlayerPiP"]) {
                            showToast(@"设置已更改，请重启App以应用");
                        }
                    }
                };
                [pipSettingsItems addObject:item];
            }
            pipSettingsSection.itemArray = pipSettingsItems;

            viewModel.sectionDataArray = @[basicSettingsSection, uiSettingsSection, hideSettingsSection, removeSettingsSection, enhanceSettingsSection, segmentationSettingsSection, pipSettingsSection];
            objc_setAssociatedObject(settingsVC, &kViewModelKey, viewModel, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
            [rootVC.navigationController pushViewController:settingsVC animated:YES];
        };
        AWESettingSectionModel *newSection = [[%c(AWESettingSectionModel) alloc] init];
        newSection.itemArray = @[newItem];
        newSection.type = 0;
        newSection.sectionHeaderHeight = 40;
        newSection.sectionHeaderTitle = @"DYYY";
        NSMutableArray *newSections = [NSMutableArray arrayWithArray:originalSections];
        [newSections insertObject:newSection atIndex:0];
        return newSections;
    }
    return originalSections;
}
%end




// Hook: 下载
%hook AWELongPressPanelTableViewController
- (NSArray *)dataArray {
    NSArray *originalArray = %orig; // 获取原始数组
    if (!getUserDefaults(@"DYYYLongPressDownload")) return originalArray; // 如果未启用长按下载，直接返回原始数组

    // 创建新的分组模型
    AWELongPressPanelViewGroupModel *newGroupModel = [[%c(AWELongPressPanelViewGroupModel) alloc] init];
    newGroupModel.groupType = 0;

    // 获取视频和音乐模型
    AWELongPressPanelBaseViewModel *tempViewModel = [[%c(AWELongPressPanelBaseViewModel) alloc] init];
    AWEAwemeModel *awemeModel = tempViewModel.awemeModel;
    AWEVideoModel *videoModel = awemeModel.video;
    AWEMusicModel *musicModel = awemeModel.music;
    AWEImageAlbumImageModel *currentImageModel = awemeModel.albumImages.count == 1 ? awemeModel.albumImages.firstObject : awemeModel.albumImages[awemeModel.currentImageIndex - 1];

    // 根据内容类型设置自定义按钮和图标
    NSArray *customButtons = awemeModel.awemeType == 68 ? @[@"下载图片", @"下载音频", @"下载封面"] : @[@"下载视频", @"下载音频", @"下载封面"];
    NSArray *customIcons = @[@"ic_star_outlined_12", @"ic_star_outlined_12", @"ic_star_outlined_12"];
    NSMutableArray *viewModels = [NSMutableArray arrayWithCapacity:customButtons.count];

    // 创建并配置每个按钮的视图模型
    for (NSUInteger i = 0; i < customButtons.count; i++) {
        AWELongPressPanelBaseViewModel *viewModel = [[%c(AWELongPressPanelBaseViewModel) alloc] init];
        viewModel.describeString = customButtons[i];
        viewModel.enterMethod = DYYY;
        viewModel.actionType = 100 + i;
        viewModel.showIfNeed = YES;
        viewModel.duxIconName = customIcons[i];
        __weak AWELongPressPanelBaseViewModel *weakViewModel = viewModel; // 使用弱引用避免循环引用

        // 设置按钮动作
        viewModel.action = ^{
            AWELongPressPanelBaseViewModel *strongViewModel = weakViewModel; // 在块内转为强引用
            if (strongViewModel) {
                NSURL *url = nil;
                switch (strongViewModel.actionType) {
                    case 100: // 下载视频或图片
                        if (awemeModel.awemeType == 68) {
                            url = [NSURL URLWithString:currentImageModel.urlList.firstObject];
                            downloadMedia(url, MediaTypeImage);
                        } else {
                            url = [NSURL URLWithString:videoModel.h264URL.originURLList.firstObject];
                            downloadMedia(url, MediaTypeVideo);
                        }
                        break;
                    case 101: // 下载音频
                        url = [NSURL URLWithString:musicModel.playURL.originURLList.firstObject];
                        downloadMedia(url, MediaTypeAudio);
                        break;
                    case 102: // 下载封面
                        url = [NSURL URLWithString:videoModel.coverURL.originURLList.firstObject];
                        downloadMedia(url, MediaTypeImage);
                        break;
                }
            }
        };
        [viewModels addObject:viewModel];
    }

    // 设置分组模型的视图模型数组
    newGroupModel.groupArr = viewModels;

    // 拆分返回语句，避免编译器解析错误
    NSArray *originalOrEmpty = originalArray ?: @[]; // 处理 nil 情况
    NSArray *combinedArray = [@[newGroupModel] arrayByAddingObjectsFromArray:originalOrEmpty]; // 合并数组
    return combinedArray; // 返回最终数组
}
%end




// =============== pxx917144686 更新～ =====================
// 插入分词逻辑：UILabel、UITextView 和 UITextField 的 setText: 方法
%hook UILabel
- (void)setText:(NSString *)text {
    // 获取用户设置
    BOOL enableGlobalSegmentation = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableGlobalSegmentation"];
    BOOL isDarkKeyboard = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"];
    
    // 如果启用全局分词且文本不为空，进行分词处理
    if (enableGlobalSegmentation && text.length > 0) {
        NSArray *segments = [GBigbangBox bigBang:text];
        if (segments.count > 0) {
            // 创建分词后的富文本
            NSMutableAttributedString *attributedText = [[NSMutableAttributedString alloc] init];
            for (GBigbangItem *item in segments) {
                NSString *segmentText = item.text;
                [attributedText appendAttributedString:[[NSAttributedString alloc] initWithString:segmentText]];
                [attributedText appendAttributedString:[[NSAttributedString alloc] initWithString:@" "]];
            }
            self.attributedText = attributedText;
            // 设置了 attributedText 后直接返回，不调用 %orig
            return;
        }
    }
    
    // 如果启用深色键盘且文本匹配特定前缀，修改颜色
    if (isDarkKeyboard && ([text hasPrefix:@"善语"] || [text hasPrefix:@"友爱评论"] || [text hasPrefix:@"回复"])) {
        self.textColor = [UIColor colorWithRed:125/255.0 green:125/255.0 blue:125/255.0 alpha:0.6];
    }
    
    // 调用原始方法设置文本
    %orig(text);
}
%end

// ============
%hook UITextView
%new
- (BOOL)shouldApplyGlobalSegmentation {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableGlobalSegmentation"];
}

%new
- (void)displaySegmentedText:(NSArray *)segments {
    NSMutableAttributedString *attributedText = [[NSMutableAttributedString alloc] init];
    for (GBigbangItem *item in segments) {
        [attributedText appendAttributedString:[[NSAttributedString alloc] initWithString:item.text]];
        [attributedText appendAttributedString:[[NSAttributedString alloc] initWithString:@" "]];
    }
    self.attributedText = attributedText;
}

- (void)setText:(NSString *)text {
    if ([self shouldApplyGlobalSegmentation] && text.length > 0) {
        NSArray *segments = [GBigbangBox bigBang:text];
        if (segments.count > 0) {
            [self displaySegmentedText:segments];
        } else {
            %orig(text);
        }
    } else {
        %orig(text);
    }
}
%end

// ==========
%hook UITextField
%new
- (BOOL)shouldApplyGlobalSegmentation {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableGlobalSegmentation"];
}

%new
- (void)displaySegmentedText:(NSArray *)segments {
    NSMutableString *segmentedText = [[NSMutableString alloc] init];
    for (GBigbangItem *item in segments) {
        [segmentedText appendString:item.text];
        [segmentedText appendString:@" "];
    }
    self.text = segmentedText;
}

- (void)setText:(NSString *)text {
    if ([self shouldApplyGlobalSegmentation] && text.length > 0) {
        NSArray *segments = [GBigbangBox bigBang:text];
        if (segments.count > 0) {
            [self displaySegmentedText:segments];
        } else {
            %orig(text);
        }
    } else {
        %orig(text);
    }
}
%end

// =======================================
// Hook 复制功能：通过 Hook UIMenuController 和 UIView，在复制菜单中添加“复制分词”选项
%hook UIMenuController
%new
- (BOOL)shouldAddSegmentationOptions {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableCopySegmentation"];
}

- (void)setMenuItems:(NSArray<UIMenuItem *> *)menuItems {
    if ([self shouldAddSegmentationOptions]) {
        NSMutableArray *newMenuItems = [menuItems mutableCopy] ?: [NSMutableArray array];
        UIMenuItem *segmentCopyItem = [[UIMenuItem alloc] initWithTitle:@"复制分词" action:@selector(copySegmentedText:)];
        [newMenuItems addObject:segmentCopyItem];
        %orig(newMenuItems);
    } else {
        %orig(menuItems);
    }
}
%end

// Hook: 视图调整（全局透明、深色键盘等）
%hook UIView
// 新增方法：获取最近的 UIViewController
%new
- (UIViewController *)firstAvailableUIViewController {
    UIResponder *responder = [self nextResponder];
    while (responder) {
        if ([responder isKindOfClass:[UIViewController class]]) return (UIViewController *)responder;
        responder = [responder nextResponder];
    }
    return nil;
}

// 新增方法：检查是否为文本视图
%new
- (BOOL)isTextView {
    return [self isKindOfClass:[UILabel class]] ||
           [self isKindOfClass:[UITextView class]] ||
           [self isKindOfClass:[UITextField class]];
}

// 新增方法：获取用于复制的文本
%new
- (NSString *)textForCopy {
    if ([self isKindOfClass:[UILabel class]]) {
        return ((UILabel *)self).text;
    } else if ([self isKindOfClass:[UITextView class]]) {
        return ((UITextView *)self).text;
    } else if ([self isKindOfClass:[UITextField class]]) {
        return ((UITextField *)self).text;
    }
    return nil;
}

// 新增方法：复制分词文本
%new
- (void)copySegmentedText:(id)sender {
    if ([self isTextView]) {
        NSString *text = [self textForCopy];
        if (text.length > 0) {
            NSArray *segments = [GBigbangBox bigBang:text];
            if (segments.count > 0) {
                NSString *segmentedText = [[segments valueForKeyPath:@"@unionOfObjects.text"] componentsJoinedByString:@" "];
                UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
                pasteboard.string = segmentedText;
                showToast(@"已复制分词文本");
            } else {
                UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
                pasteboard.string = text;
                showToast(@"已复制原始文本");
            }
        }
    }
}

// 修改视图的 frame
- (void)setFrame:(CGRect)frame {
    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"]) {
        %orig;
        return;
    }
    UIViewController *vc = [self firstAvailableUIViewController];
    if ([vc isKindOfClass:%c(AWEAwemePlayVideoViewController)]) {
        if (frame.origin.x != 0 || frame.origin.y != 0) return;
    }
    %orig;
}

// 修改视图的透明度
- (void)setAlpha:(CGFloat)alpha {
    UIViewController *vc = [self firstAvailableUIViewController];
    if ([vc isKindOfClass:%c(AWEPlayInteractionViewController)] && alpha > 0) {
        NSString *transparentValue = [[NSUserDefaults standardUserDefaults] stringForKey:@"DYYYGlobalTransparency"];
        if (transparentValue.length > 0) {
            CGFloat alphaValue = transparentValue.floatValue;
            if (alphaValue >= 0.0 && alphaValue <= 1.0) {
                %orig(alphaValue);
                return;
            }
        }
    }
    %orig;
}

// 布局子视图
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:NSClassFromString(@"AWECommentInputViewSwiftImpl.CommentInputViewMiddleContainer")]) {
                for (UIView *innerSubview in subview.subviews) {
                    if ([innerSubview isKindOfClass:[UIView class]]) {
                        innerSubview.backgroundColor = [UIColor colorWithRed:31/255.0 green:33/255.0 blue:35/255.0 alpha:1.0];
                        break;
                    }
                }
            }
            if ([subview isKindOfClass:NSClassFromString(@"AWEIMEmoticonPanelBoxView")]) {
                subview.backgroundColor = [UIColor colorWithRed:33/255.0 green:33/255.0 blue:33/255.0 alpha:1.0];
            }
        }
    }
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"] || 
        [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"]) {
        if ([NSStringFromClass([self class]) isEqualToString:@"AWECommentInputViewSwiftImpl.CommentInputContainerView"]) {
            for (UIView *subview in self.subviews) {
                if ([subview isKindOfClass:[UIView class]] && subview.backgroundColor) {
                    CGFloat red, green, blue, alpha;
                    [subview.backgroundColor getRed:&red green:&green blue:&blue alpha:&alpha];
                    if ((red == 22/255.0 && green == 22/255.0 && blue == 22/255.0) || 
                        (red == 1.0 && green == 1.0 && blue == 1.0)) {
                        subview.backgroundColor = [UIColor clearColor];
                    }
                }
            }
        }
    }
}

// 检查是否支持特定操作
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender {
    if (action == @selector(copySegmentedText:)) {
        return [self isTextView];
    }
    return %orig(action, sender);
}
%end

// ==================================================================
// 评论区分词增强
// Hook: 评论区毛玻璃效果和 在评论区控制器中集成分词功能
%hook AWEBaseListViewController
- (void)viewDidLayoutSubviews {
    %orig;
    [self applyBlurEffectIfNeeded];
    [self integrateGBigbangCommentEnhancement]; // 确保每次布局时都检查分词增强
}

- (void)viewDidAppear:(BOOL)animated {
    %orig;
    [self applyBlurEffectIfNeeded];
    [self integrateGBigbangCommentEnhancement];
}

- (void)viewWillAppear:(BOOL)animated {
    %orig;
    [self applyBlurEffectIfNeeded];
    [self integrateGBigbangCommentEnhancement];
}

%new
- (void)applyBlurEffectIfNeeded {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"] && 
        [self isKindOfClass:NSClassFromString(@"AWECommentPanelContainerSwiftImpl.CommentContainerInnerViewController")]) {
        self.view.backgroundColor = [UIColor clearColor];
        for (UIView *subview in self.view.subviews) {
            if (![subview isKindOfClass:[UIVisualEffectView class]] && ![subview isKindOfClass:[GTagFlowContainer class]]) {
                subview.backgroundColor = [UIColor clearColor];
            }
        }
        UIVisualEffectView *existingBlurView = nil;
        for (UIView *subview in self.view.subviews) {
            if ([subview isKindOfClass:[UIVisualEffectView class]] && subview.tag == 999) {
                existingBlurView = (UIVisualEffectView *)subview;
                break;
            }
        }
        BOOL isDarkMode = YES;
        UILabel *commentLabel = [self findCommentLabel:self.view];
        if (commentLabel) {
            UIColor *textColor = commentLabel.textColor;
            CGFloat red, green, blue, alpha;
            [textColor getRed:&red green:&green blue:&blue alpha:&alpha];
            if (red > 0.7 && green > 0.7 && blue > 0.7) isDarkMode = NO; // 修正逻辑：亮色文本表示非暗模式
            else if (red < 0.3 && green < 0.3 && blue < 0.3) isDarkMode = YES;
        }
        UIBlurEffectStyle blurStyle = isDarkMode ? UIBlurEffectStyleDark : UIBlurEffectStyleLight;
        if (!existingBlurView) {
            UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:blurStyle];
            UIVisualEffectView *blurEffectView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
            blurEffectView.frame = self.view.bounds;
            blurEffectView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            blurEffectView.alpha = 0.98;
            blurEffectView.tag = 999;
            UIView *overlayView = [[UIView alloc] initWithFrame:self.view.bounds];
            CGFloat alpha = isDarkMode ? 0.3 : 0.1;
            overlayView.backgroundColor = [UIColor colorWithWhite:(isDarkMode ? 0 : 1) alpha:alpha];
            overlayView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            [blurEffectView.contentView addSubview:overlayView];
            [self.view insertSubview:blurEffectView atIndex:0];
        } else {
            UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:blurStyle];
            [existingBlurView setEffect:blurEffect];
            for (UIView *subview in existingBlurView.contentView.subviews) {
                if (subview.tag != 999) {
                    CGFloat alpha = isDarkMode ? 0.3 : 0.1;
                    subview.backgroundColor = [UIColor colorWithWhite:(isDarkMode ? 0 : 1) alpha:alpha];
                }
            }
            [self.view insertSubview:existingBlurView atIndex:0];
        }
    }
}

%new
- (UILabel *)findCommentLabel:(UIView *)view {
    if ([view isKindOfClass:[UILabel class]]) {
        UILabel *label = (UILabel *)view;
        if (label.text && ([label.text hasSuffix:@"条评论"] || [label.text hasSuffix:@"暂无评论"])) return label;
    }
    for (UIView *subview in view.subviews) {
        UILabel *result = [self findCommentLabel:subview];
        if (result) return result;
    }
    return nil;
}

%new
- (void)integrateGBigbangCommentEnhancement {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableCommentEnhancement"] && 
        [self isKindOfClass:NSClassFromString(@"AWECommentPanelContainerSwiftImpl.CommentContainerInnerViewController")]) {
        UILabel *commentLabel = [self findCommentLabel:self.view];
        if (!commentLabel || !commentLabel.text.length) return;
        NSArray *segments = [GBigbangBox bigBang:commentLabel.text];
        if (!segments.count) return;
        for (UIView *subview in self.view.subviews) {
            if ([subview isKindOfClass:[GTagFlowContainer class]]) {
                [subview removeFromSuperview];
            }
        }
        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableCommentTagFlow"]) {
            GTagFlowContainer *tagContainer = [[GTagFlowContainer alloc] initWithFrame:self.view.bounds];
            NSMutableArray *flowItems = [NSMutableArray array];
            for (GBigbangItem *item in segments) {
                GTagFlowItem *flowItem = [[GTagFlowItem alloc] init];
                flowItem.text = item.text;
                flowItem.isSymbolOrEmoji = item.isSymbolOrEmoji;
                flowItem.itemSize = [self sizeForText:item.text withFont:[UIFont systemFontOfSize:14]];
                [flowItems addObject:flowItem];
            }
            [tagContainer configDatas:flowItems];
            [tagContainer setBackgroundColor:[UIColor clearColor]];
            [tagContainer setTextColor:commentLabel.textColor];
            tagContainer.actionBtnItems = @[@"复制", @"翻译", @"搜索"];
            tagContainer.actionBlock = ^(NSString *actionTitle, NSString *newText) {
                if ([actionTitle isEqualToString:@"复制"]) {
                    UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
                    pasteboard.string = newText;
                    showToast(@"已复制到剪贴板");
                } else if ([actionTitle isEqualToString:@"翻译"]) {
                    showToast(@"翻译功能待实现");
                } else if ([actionTitle isEqualToString:@"搜索"]) {
                    showToast(@"搜索功能待实现");
                }
            };
            CGRect frame = tagContainer.frame;
            frame.origin.y = CGRectGetMaxY(commentLabel.frame) + 5;
            frame.size.height = self.view.bounds.size.height - frame.origin.y;
            tagContainer.frame = frame;
            [self.view addSubview:tagContainer];
            [tagContainer show];
        }
    }
}

%new
- (CGSize)sizeForText:(NSString *)text withFont:(UIFont *)font {
    NSDictionary *attributes = @{NSFontAttributeName: font};
    return [text boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)
                              options:NSStringDrawingUsesLineFragmentOrigin
                           attributes:attributes
                              context:nil].size;
}
%end

// =====================================================================
// Hook IESLivePipManager: 核心管理器，控制 PiP 的显示和隐藏
%hook IESLivePipManager
- (void)showPipWithPipModel:(id)pipModel callTrace:(id)callTrace {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        %orig(pipModel, callTrace); // 调用原始方法以显示 PiP
    }
}

- (void)hidePipWithPipModel:(id)pipModel callTrace:(id)callTrace {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYForceHidePiP"]) {
        %orig(pipModel, callTrace); // 强制隐藏 PiP
    } else {
        %orig;
    }
}

- (BOOL)isShowingPip {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYForcePiPShowing"]) {
        return YES; // 强制返回 PiP 正在显示
    }
    return %orig;
}
%end

// Hook IESLiveOnePipManager: 管理单个 PiP 实例
%hook IESLiveOnePipManager
- (void)showPipWithPipModel:(id)pipModel callTrace:(id)callTrace {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableOnePiP"]) {
        %orig(pipModel, callTrace); // 显示单个 PiP 实例
    }
}
%end

// Hook IESLivePipUnitManager: 管理 PiP 单元
%hook IESLivePipUnitManager
- (void)showPip:(id)pip {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiPUnit"]) {
        %orig(pip); // 显示 PiP 单元
    }
}
%end

// Hook IESLivePipSettingsItemManager: 处理 PiP 设置项
%hook IESLivePipSettingsItemManager
- (BOOL)enableShowPipWithEntranceType:(id)entranceType {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiPSettings"]) {
        return YES; // 强制启用 PiP 设置
    }
    return %orig;
}
%end

// Hook IESLiveOnePipLiveSmallWindowManager: 管理直播小窗口
%hook IESLiveOnePipLiveSmallWindowManager
- (void)showPipWithEntranceType:(id)entranceType {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableLivePiP"]) {
        %orig(entranceType); // 显示直播小窗口
    }
}
%end

// Hook IESLiveOnePipAVPiPManager: 管理音视频 PiP
%hook IESLiveOnePipAVPiPManager
- (void)showPip:(id)pip {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableAVPiP"]) {
        %orig(pip); // 显示音视频 PiP
    }
}
%end

// Hook IESLiveAVPipManager: 管理音视频 PiP
%hook IESLiveAVPipManager
- (void)showPip:(id)pip {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableAVPiP"]) {
        %orig(pip); // 显示音视频 PiP
    }
}
%end

// Hook AWEAwemePlayVideoController: 在视频控制器中初始化 PiP 支持
%hook AWEAwemePlayVideoController
- (void)viewDidLoad {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        UIViewController *vc = (UIViewController *)self;
        for (UIView *subview in vc.view.subviews) {
            if ([subview isKindOfClass:NSClassFromString(@"TTPlayerView")]) {
                [self setupPiPForView:subview];
                break;
            }
        }
    }
}

%new
- (void)setupPiPForView:(UIView *)playerView {
    id player = [playerView valueForKey:@"player"];
    if ([player isKindOfClass:[AVPlayer class]]) {
        AVPlayer *avPlayer = (AVPlayer *)player;
        AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:avPlayer];
        AVPictureInPictureController *pipController = [[AVPictureInPictureController alloc] initWithPlayerLayer:playerLayer];
        if (pipController && [pipController isPictureInPicturePossible]) {
            [pipController startPictureInPicture];
        }
    }
}
%end

// Hook AWEFEEDPIPServiceImpl: 强制启用 PiP 支持
%hook AWEFEEDPIPServiceImpl
- (BOOL)isPIPEnabled {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        return YES; // 强制返回 PiP 已启用
    }
    return %orig;
}

- (BOOL)canStartPictureInPicture {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        return YES; // 强制允许启动 PiP
    }
    return %orig;
}
%end

// Hook AWEFEEDPIPOriginPlayerContext: 确保播放器上下文支持 PiP
%hook AWEFEEDPIPOriginPlayerContext
- (BOOL)isPIPAvailable {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        return YES; // 强制返回 PiP 可用
    }
    return %orig;
}
%end

// Hook AWEIPhonePiPManager: 控制 PiP 的启动逻辑
%hook AWEIPhonePiPManager
- (void)startPiP {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYForcePiP"]) {
        %orig; // 强制启动 PiP
    } else {
        %orig;
    }
}

- (BOOL)forcePiP {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYForcePiP"]; // 返回是否强制 PiP
}
%end

// Hook AWEFEEDPIPPanelButtonCell: 通过按钮手动触发 PiP
%hook AWEFEEDPIPPanelButtonCell
- (void)buttonClicked:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYUsePiPButton"]) {
        id pipManager = [NSClassFromString(@"AWEIPhonePiPManager") performSelector:@selector(sharedInstance)];
        if (!pipManager) {
            pipManager = [[NSClassFromString(@"AWEIPhonePiPManager") alloc] init];
        }
        if ([pipManager respondsToSelector:@selector(startPiP)]) {
            [pipManager performSelector:@selector(startPiP)];
        }
    } else {
        %orig;
    }
}
%end

// Hook AWEFEEDPIPPlayerContainer: 强制显示 PiP 容器
%hook AWEFEEDPIPPlayerContainer
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiPContainer"]) {
        ((UIView *)self).hidden = NO; // 强制显示 PiP 容器
    }
}
%end

// Hook AVPlayer: 为 AVPlayer 添加 PiP 支持
%hook AVPlayer
- (void)play {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableAVPlayerPiP"]) {
        AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:self];
        if (playerLayer) {
            AVPictureInPictureController *pipController = [[AVPictureInPictureController alloc] initWithPlayerLayer:playerLayer];
            if (pipController && [pipController isPictureInPicturePossible]) {
                [pipController startPictureInPicture];
            }
        }
    }
}
%end

// Hook TTPlayerView: 为 TTPlayerView 添加 PiP 支持
%hook TTPlayerView
- (void)play {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiP"]) {
        id player = [self valueForKey:@"player"];
        if ([player isKindOfClass:[AVPlayer class]]) {
            AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:(AVPlayer *)player];
            if (playerLayer) {
                AVPictureInPictureController *pipController = [[AVPictureInPictureController alloc] initWithPlayerLayer:playerLayer];
                if (pipController && [pipController isPictureInPicturePossible]) {
                    [pipController startPictureInPicture];
                }
            }
        }
    }
}
%end

%ctor {
    // 初始化时确保分词功能的默认值为开启
    NSDictionary *defaultSettings = @{
        @"DYYYEnableGlobalSegmentation": @YES,
        @"DYYYEnableCommentEnhancement": @YES,
        @"DYYYEnableCommentTagFlow": @YES
    };
    for (NSString *key in defaultSettings) {
        if ([[NSUserDefaults standardUserDefaults] objectForKey:key] == nil) {
            [[NSUserDefaults standardUserDefaults] setObject:defaultSettings[key] forKey:key];
        }
    }
    [[NSUserDefaults standardUserDefaults] synchronize];
}